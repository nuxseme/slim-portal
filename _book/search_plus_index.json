{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Silm 是一个php轻框架，旨在提供快速开发出强大的web应用和接口 get('/hello/{name}', function (Request $request, Response $response, array $args) { $name = $args['name']; $response->getBody()->write(\"Hello, $name\"); return $response; }); $app->run(); 安装 初次创建项目 composer create-project slim/slim-skeleton:dev-master [my-app-name] 自建项目目录之后直接compose 引入 composer require slim/slim 学习或者初始项目建议按第一种方式安装，里面已经包含了比较规范的目录结构，参照DDD模型设计，还包含了测试用例，路由示例，中间件示例，基础设置持久化示例等等 特色 HTTP Router Slim provides a fast and powerful router that maps route callbacks to specific HTTP request methods and URIs. It supports parameters and pattern matching. HTTP 路由 Slim 提供了一个强大快速的路由器，能快速映射HTTP请求和URIs，支持参数设置和模式匹配 Middleware Build your application with concentric middleware to tweak the HTTP request and response objects around your Slim app. 中间件 围绕http请求和响应的中间件层来构建应用 PSR-7 Support Slim supports any PSR-7 HTTP message implementation so you may inspect and manipulate HTTP message method, status, URI, headers, cookies, and body. PSR-7 规范支持 Slim 广泛实现了PSR-7设计的HTTPP相关的接口，使其可以方便使用实现接口的第三方库 Dependency Injection Slim supports dependency injection so you have complete control of your external tools. Use any Container-Interop container. 依赖注入 Slim 提供了容器，方便依赖注入 核心架构图示 总结 Slim 相对其他的轻框架比较更加高效，扩展能力更强，容易集成第三方类库的使用，相对YII这种大型框架比较灵活，框架束缚比较少，相应的提供的能力没那么强。Slim更多处理简易项目和API接口项目比较方便，中间件的灵活使用也使得应用结构简单，更加模块化。 "},"1-get-started/1-home.html":{"url":"1-get-started/1-home.html","title":"Home","keywords":"","body":"Slim 4 Documentation Welcome Slim is a PHP micro framework that helps you quickly write simple yet powerful web applications and APIs. At its core, Slim is a dispatcher that receives an HTTP request, invokes an appropriate callback routine, and returns an HTTP response. That’s it. Slim 是一个轻型的php框架，旨在帮助你快速构建强大的web application 和 APIs。Slim的核心是一个调度器，接受HTTP请求，唤醒合适的回调逻辑处理之后返回一个HTTP 响应。这就是全部。 Slim 核心代码提供的功能有限，比较适合轻型项目和接口类型的项目。 What’s the point? Symfony or Laravel 是非常好的框架，但是对于轻型项目没必要。正常的一个http请求从客户端发起到服务器接受，经过路由处理解析成对应的controller 和 action 以及参数，执行完成业务逻辑之后返回一个HTTP响应给到客户端，这就是整个基本的核心逻辑。其中还有很多逻辑，比如登录态校验，参数校验，拦截器，权限校验等等大型框架集成的东西，在一个微型的项目中可能用不到。所以Slim 秉承实现最小的原则，仅仅实现了核心的路由解析调度，中间件调度器的逻辑，其他逻辑开发者可以自行扩展。Slim生态中有很多开源的中间件，基本都遵循prs-7,prs-15等接口规范，开箱即用。开发者可以自己在核心之外，中间件的链路上集成对请求和响应的处理逻辑。框架之外，Slim并不限制项目的架构模式，可以单纯的函数，也可以是简易的MVC，也可以是比较复杂的DDD架构（Slim create project 就是推荐这种架构模式）。开发者可以灵活地调整合适的架构。 ​ 并没有什么完美的架构，恰当即完美 Slim的开发者多次强调了这段话，可以细品 ***At its core, Slim is a dispatcher that receives an HTTP request, invokes an appropriate callback routine, and returns an HTTP response. That’s it*** 原文 Slim is an ideal tool to create APIs that consume, repurpose, or publish data. Slim is also a great tool for rapid prototyping. Heck, you can even build full-featured web applications with user interfaces. More importantly, Slim is super fast and has very little code. In fact, you can read and understand its source code in only an afternoon! You don’t always need a kitchen-sink solution like Symfony or Laravel. These are great tools, for sure. But they are often overkill. Instead, Slim provides only a minimal set of tools that do what you need and nothing else. How does it work? First, you need a web server like Nginx or Apache. You should configure your web server so that it sends all appropriate requests to one “front-controller” PHP file. You instantiate and run your Slim app in this PHP file. A Slim app contains routes that respond to specific HTTP requests. Each route invokes a callback and returns an HTTP response. To get started, you first instantiate and configure the Slim application. Next, you define your application routes. Finally, you run the Slim application. It’s that easy. Here’s an example application: 本地开发或者调试可以使用browser或者IDE的HTTP-Client + 内置的web服务器 php -S 推荐部署nginx服务器，可以解决后端源码，前端静态资源目录，路径设置等可能引起的问题。 类似所有的框架一样，必然有一个入口文件，比如index.php 整个请求由此开始... Slim应用主要就是处理请求并生成一个响应。每一个路由唤醒的调用逻辑都接受一个Request的类，处理完成之后返回一个Respose的类。 通常index.php 实现了以下逻辑: 1 定义常量或者引入常量文件 2 引入自动加载文件，可以多个 ​ 按加载的顺序查找，相同的文件一般用namespace区分 3 如果需要，实例化容器，将初始化的类或者参数绑定到容器 4 实例化Slim App 5 引入或者设置 当前app的路由配置 6 引入或者设置中间件配置文件 除了5,6需要绑定app必须在实例化之后，很多其他的逻辑，比如日志，渲染器等等的使用视情况而定 run(); 官方的例子和说明 addRoutingMiddleware(); /** * Add Error Handling Middleware * * @param bool $displayErrorDetails -> Should be set to false in production * @param bool $logErrors -> Parameter is passed to the default ErrorHandler * @param bool $logErrorDetails -> Display error details in error log * which can be replaced by a callable of your choice. * Note: This middleware should be added last. It will not handle any exceptions/errors * for middleware added after it. */ $errorMiddleware = $app->addErrorMiddleware(true, true, true); // Define app routes $app->get('/hello/{name}', function (Request $request, Response $response, $args) { $name = $args['name']; $response->getBody()->write(\"Hello, $name\"); return $response; }); // Run app $app->run(); Request and response 官方注解，比较能反映Slim的设计哲学，明白这个之后，理解源码就比较轻松了 When you build a Slim app, you are often working directly with Request and Response objects. These objects represent the actual HTTP request received by the web server and the eventual HTTP response returned to the client. Every Slim app route is given the current Request and Response objects as arguments to its callback routine. These objects implement the popular PSR-7 interfaces. The Slim app route can inspect or manipulate these objects as necessary. Ultimately, each Slim app route MUST return a PSR-7 Response object. "},"1-get-started/2-installtion.html":{"url":"1-get-started/2-installtion.html","title":"Installtion","keywords":"","body":"Installation System Requirements Web server with URL rewriting PHP 7.2 or newer Step 1: Install Composer Step 2: Install Slim 已有MCV代码了 composer require slim/slim 初始化项目建议以下 compser create-project slim/slim-skeleton:dev-master [my-app-name] Step 3: Install a PSR-7 Implementation and ServerRequest Creator 这一步必须要，Slim源码中只定义了默认的类，但是没有安装第三方的类库 Slim PSR-7 建议安装Slim 官方的，其他的不知道后续是不是继续维护 composer require slim/psr7 Step 4: Hello World get('/', function (Request $request, Response $response, $args) { $response->getBody()->write(\"Hello world!\"); return $response; }); $app->run(); "},"1-get-started/3-web-servers.html":{"url":"1-get-started/3-web-servers.html","title":"Web Servers","keywords":"","body":"Web Servers It is typical to use the front-controller pattern to funnel appropriate HTTP requests received by your web server to a single PHP file. The instructions below explain how to tell your web server to send HTTP requests to your PHP front-controller file. PHP built-in server cd public/ php -S localhost:8888 Nginx configuration server { charset utf-8; client_max_body_size 128M; listen 80; ## listen for ipv4 server_name server_name.com; root /your/path; #index web/index.html; access_log /your/path/access.log; error_log /your/path/error.log; location / { try_files /web/$uri /web/index.html 404; } location ~ \\.(txt|xml|js|vue|css|ttf)$ { try_files /web/$uri /web/index.html 404; expires 7d; } location ~ \\.(jpg|jpeg|gif|png|ico)$ { try_files /web/$uri /web/index.html 404; expires 30m; } location /protected { deny all; } location ~ \\.php$ { add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type'; add_header 'Access-Control-Allow-Origin' \"$http_origin\"; add_header 'Access-Control-Allow-Credentials' \"true\"; add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS'; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; fastcgi_param REQUEST_URI $php_url?$args; fastcgi_param REAL_REQUEST_URI $request_uri; fastcgi_pass 127.0.0.1:9000; try_files $uri =404; } location ~ /\\.(ht|svn|git) { deny all; } location ~* ^/api(/.*)$ { set $php_url $1; try_files $uri $uri/ /index-test.php?$args; # 根据环境路由到不同的入口文件 } } "},"1-get-started/4-deployment.html":{"url":"1-get-started/4-deployment.html","title":"Deployment","keywords":"","body":"Deployment Disable error display in production addErrorMiddleware(false, true, true); // ... $app->run(); "},"2-concepts/1-application-life-cycle.html":{"url":"2-concepts/1-application-life-cycle.html","title":"Application Life Cycle","keywords":"","body":"somehing "},"2-concepts/2-psr-7.html":{"url":"2-concepts/2-psr-7.html","title":"Psr 7","keywords":"","body":""},"2-concepts/3-middleware.html":{"url":"2-concepts/3-middleware.html","title":"Middleware","keywords":"","body":""},"2-concepts/4-dependency-container.html":{"url":"2-concepts/4-dependency-container.html","title":"Dependency Container","keywords":"","body":""},"3-application/1-overview.html":{"url":"3-application/1-overview.html","title":"Overview","keywords":"","body":""},"3-application/2-notices-warings-handling.html":{"url":"3-application/2-notices-warings-handling.html","title":"Notices Warings Handling","keywords":"","body":""},"4-request/1-overview.html":{"url":"4-request/1-overview.html","title":"Overview","keywords":"","body":""},"4-request/2-method.html":{"url":"4-request/2-method.html","title":"Method","keywords":"","body":""},"4-request/3-headers.html":{"url":"4-request/3-headers.html","title":"Headers","keywords":"","body":""},"4-request/4-body.html":{"url":"4-request/4-body.html","title":"Body","keywords":"","body":""},"4-request/5-uploaded-files.html":{"url":"4-request/5-uploaded-files.html","title":"Uploaded Files","keywords":"","body":""},"4-request/6-helpers.html":{"url":"4-request/6-helpers.html","title":"Helpers","keywords":"","body":""},"4-request/7-route-object.html":{"url":"4-request/7-route-object.html","title":"Route Object","keywords":"","body":""},"5-response/1-overview.html":{"url":"5-response/1-overview.html","title":"Overview","keywords":"","body":""},"5-response/2-status.html":{"url":"5-response/2-status.html","title":"Status","keywords":"","body":""},"5-response/3-headers.html":{"url":"5-response/3-headers.html","title":"Headers","keywords":"","body":""},"5-response/4-body.html":{"url":"5-response/4-body.html","title":"Body","keywords":"","body":""},"5-response/5-json.html":{"url":"5-response/5-json.html","title":"Json","keywords":"","body":""},"6-routing/1-overview.html":{"url":"6-routing/1-overview.html","title":"Overview","keywords":"","body":""},"6-routing/2-create-routes.html":{"url":"6-routing/2-create-routes.html","title":"Create Routes","keywords":"","body":""},"6-routing/3-callbacks.html":{"url":"6-routing/3-callbacks.html","title":"Callbacks","keywords":"","body":""},"6-routing/4-strategies.html":{"url":"6-routing/4-strategies.html","title":"Strategies","keywords":"","body":""},"6-routing/5-placeholders.html":{"url":"6-routing/5-placeholders.html","title":"Placeholders","keywords":"","body":""},"6-routing/6-names.html":{"url":"6-routing/6-names.html","title":"Names","keywords":"","body":""},"6-routing/7-groups.html":{"url":"6-routing/7-groups.html","title":"Groups","keywords":"","body":""},"6-routing/8-middleware.html":{"url":"6-routing/8-middleware.html","title":"Middleware","keywords":"","body":""},"6-routing/9-caching.html":{"url":"6-routing/9-caching.html","title":"Caching","keywords":"","body":""},"6-routing/10-container-resolution.html":{"url":"6-routing/10-container-resolution.html","title":"Container Resolution","keywords":"","body":""},"7-packaged-middleware/1-routing.html":{"url":"7-packaged-middleware/1-routing.html","title":"Routing","keywords":"","body":""},"7-packaged-middleware/2-error-handling.html":{"url":"7-packaged-middleware/2-error-handling.html","title":"Error Handling","keywords":"","body":""},"7-packaged-middleware/3-method-overriding.html":{"url":"7-packaged-middleware/3-method-overriding.html","title":"Method Overriding","keywords":"","body":""},"7-packaged-middleware/4-output-buffering.html":{"url":"7-packaged-middleware/4-output-buffering.html","title":"Output Buffering","keywords":"","body":""},"7-packaged-middleware/5-body-parsing.html":{"url":"7-packaged-middleware/5-body-parsing.html","title":"Body Parsing","keywords":"","body":""},"7-packaged-middleware/6-content-length.html":{"url":"7-packaged-middleware/6-content-length.html","title":"Content Length","keywords":"","body":""},"8-cook-book/1-trailing-in-routes.html":{"url":"8-cook-book/1-trailing-in-routes.html","title":"Trailing In Routes","keywords":"","body":""},"8-cook-book/2-retrieving-current-route.html":{"url":"8-cook-book/2-retrieving-current-route.html","title":"Retrieving Current Route","keywords":"","body":""},"8-cook-book/3-enabling-cors.html":{"url":"8-cook-book/3-enabling-cors.html","title":"Enabling Cors","keywords":"","body":""},"8-cook-book/4-uploading-files-using-post.html":{"url":"8-cook-book/4-uploading-files-using-post.html","title":"Uploading Files Using Post","keywords":"","body":""},"8-cook-book/5-forms.html":{"url":"8-cook-book/5-forms.html","title":"Forms","keywords":"","body":""}}